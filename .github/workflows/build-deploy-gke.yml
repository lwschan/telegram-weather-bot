name: Build Docker image and deploy to GKE

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: docker.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: lewisgauss/weather-bot-telegram
  # GKE configurations
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  DEPLOYMENT_NAME: das-wetter-bot

jobs:
  build-and-push:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@main

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}

  deploy-to-gke:
    needs: build-and-push
    name: Deploy to GKE
    runs-on: ubuntu-latest
    environment: production
    permissions:
      # Permissions for google-github-actions/auth
      contents: read
      id-token: write

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - id: 'auth'
      uses: 'google-github-actions/auth@v0'
      with:
        workload_identity_provider: ${{ secrets.GKE_WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.GKE_SERVICE_ACCOUNT }}
        token_format: access_token

    # Get the GKE credentials so we can deploy to the cluster
    - uses: google-github-actions/get-gke-credentials@v0
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}

    # Update image version in deployment.yaml
    - name: Update image version and environment variables in deployment.yaml
      uses: mikefarah/yq@master
      with:
        cmd: |
          yq -i '.spec.template.spec.containers[0].image = "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{  github.ref_name }}"' './manifests/deployment.yaml'
          yq -i '.spec.template.spec.containers[0].env += { "name": "TELEGRAM_TOKEN", "value": "${{ secrets.TELEGRAM_TOKEN }}" }' './manifests/deployment.yaml'
          yq -i '.spec.template.spec.containers[0].env += { "name": "AUTHORIZED_USERS", "value": "${{ secrets.AUTHORIZED_USERS }}" }' './manifests/deployment.yaml'
          yq -i '.spec.template.spec.containers[0].env += { "name": "OWM_API_KEY", "value": "${{ secrets.OWM_API_KEY }}" }' './manifests/deployment.yaml'
          
    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |-
        kubectl apply -n $DEPLOYMENT_NAME -f manifests
        kubectl rollout status -n $DEPLOYMENT_NAME deployment/$DEPLOYMENT_NAME
        kubectl get services -n $DEPLOYMENT_NAME -o wide

    # Notify Slack releases channel
    - name: Post to a Slack channel
      id: slack
      uses: slackapi/slack-github-action@v1
      with:
        channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
        slack-message: "Successfully deployed Weather Bot Telegram version ${{  github.ref_name }} to GKE.\nhttps://github.com/lwschan/weather-bot-telegram/actions/runs/${{ github.run_id }}"
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

